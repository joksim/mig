#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

#+TITLE: Programming exercises

* Reverse Pairs
Given an integer array ~nums~, return the number of /reverse pairs/ in the array.

A /reverse pair/ is a pair $(i, j)$ where:
- $0 <= i < j < nums.length$ and
- $nums[i] > 2 * nums[j]$.

Please note that \[ i < j \] is a strict requirement.

** Examples:
*** Example 1:
#+begin_example
Input: nums = [1,3,2,3,1]

Output: 2
#+end_example
- Explanation :: The reverse pairs are:
  #+begin_example
  (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
  (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
  #+end_example

*** Example 2:
#+begin_example
Input: nums = [2,4,3,5,1]
Output: 3
#+end_example
- Explanation :: The reverse pairs are:
  #+begin_example
  (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
  (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
  (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
  #+end_example

** Constraints:
- $1 <= ~nums.length~ <= 5 * 10^4$
- $-2^{31} <= ~nums[i]~ <= 2^{31} - 1$

** Starter code

** Solution ideas
Different ways to handle

** Solution
*** Brute force algorithm

*** Using Divide and Conquer and Merge sort
#+INCLUDE: ./binary-search-merge-sort.cpp src cpp

*** Using segment tree
#+INCLUDE: ./segment-tree.cpp src cpp
