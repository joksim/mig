* Browser history
You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history
number of steps or move forward in the history number of steps.

Implement the ~BrowserHistory~ class:

- ~BrowserHistory(string homepage)~ :: Initializes the object with the homepage of the browser.
- ~void visit(string url)~ :: Visits ~url~ from the current page. It clears up all the forward history.
- ~string back(int steps)~ :: Move ~steps~ back in history. If you can only return ~x~ steps in the history and ~steps > x~, you will return only ~x~ steps.
  Return the current ~url~ after moving back in history at most ~steps~.
- ~string forward(int steps)~ :: Move ~steps~ forward in history. If you can only forward ~x steps~ in the history and ~steps > x~, you will forward only ~x steps~.
  Return the current ~url~ after forwarding in history at most ~steps~.

** Example
#+begin_example
Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["mig.mk"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]

Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","mig.mk"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("mig.mk");
browserHistory.visit("google.com");       // You are in "mig.mk". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "mig.mk". return "mig.mk"
#+end_example


** Constraints:
- 1 <= homepage.length <= 20
- 1 <= url.length <= 20
- 1 <= steps <= 100
- homepage and url consist of  '.' or lower case English letters.
- At most 5000 calls will be made to visit, back, and forward.

** Solution

#+CAPTION: Test scenario
#+begin_src cpp
#include <string>

using std::string;

int main(){
BrowserHistory history = new BrowserHistory("https://www.google.com");

// User visits a few pages
history.visit("https://www.google.com/search?q=java");
history.visit("https://www.wikipedia.org/");
history.visit("https://www.amazon.com/");

// User clicks back button once
string previousPage = history.back(1);
cout << "User is now on page: " << previousPage;

// User clicks forward button twice
string nextPage = history.forward(2);
cout << "User is now on page: ",  nextPage;
}
#+end_src

#+CAPTION: Starter code
#+begin_src cpp

#include <string>

class BrowserHistory {
public:
    BrowserHistory(string homepage){

    }
    void visit(string url){

    }
    string back(int steps){

    }
    string next(int steps){

    }
}
#+end_src

#+CAPTION: Example solution
#+begin_src cpp
#include <iostream>
#include <stack>
#include <string>
using std::stack;
using std::string;
using std::cout;


class BrowserHistory {
    stack<string> history, future;
    string current;
public:
    BrowserHistory(string homepage) {
        // 'homepage' is the first visited URL.
        current = homepage;
    }

    void visit(string url) {
        // Push 'current' in 'history' stack and mark 'url' as 'current'.
        history.push(current);
        current = url;
        // We need to delete all entries from 'future' stack.
        future = stack<string>();
    }

    string back(int steps) {
        // Pop elements from 'history' stack, and push elements in 'future' stack.
        while(steps > 0 && !history.empty()) {
            future.push(current);
            current = history.top();
            history.pop();
            steps--;
        }
        return current;
    }

    string forward(int steps) {
        // Pop elements from 'future' stack, and push elements in 'history' stack.
        while(steps > 0 && !future.empty()) {
            history.push(current);
            current = future.top();
            future.pop();
            steps--;
        }
        return current;
    }
};
 using std::string;

int main(){
BrowserHistory history ("https://www.google.com");

// User visits a few pages
history.visit("https://www.google.com/search?q=java");
history.visit("https://www.wikipedia.org/");
history.visit("https://www.amazon.com/");

// User clicks back button once
string previousPage = history.back(1);
cout << "\nUser is now on page: " << previousPage;

// User clicks forward button twice
string nextPage = history.forward(2);
cout << "\nUser is now on page: ",  nextPage;
}


#+end_src

#+RESULTS:
|      |    |     |    |       |                            |
| User | is | now | on | page: | https://www.wikipedia.org/ |
| User | is | now | on | page: |                            |
