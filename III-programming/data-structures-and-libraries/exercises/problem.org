#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup

#+TITLE: Programming exercises

* Browser history
You have a browser of one tab where you start on the homepage and you can visit another url, get back in the history
number of steps or move forward in the history number of steps.

** Implement the ~BrowserHistory~ class:

- ~BrowserHistory(string homepage)~ :: Initializes the object with the homepage of the browser.
- ~void visit(string url)~ :: Visits ~url~ from the current page. It clears up all the forward history.
- ~string back(int steps)~ :: Move ~steps~ back in history. If you can only return ~x~ steps in the history and ~steps > x~, you will return only ~x~ steps.
  Return the current ~url~ after moving back in history at most ~steps~.
- ~string forward(int steps)~ :: Move ~steps~ forward in history. If you can only forward ~x steps~ in the history and ~steps > x~, you will forward only ~x steps~.
  Return the current ~url~ after forwarding in history at most ~steps~.

** Example
#+begin_example
Input:
["BrowserHistory","visit","visit","visit","back","back","forward","visit","forward","back","back"]
[["mig.mk"],["google.com"],["facebook.com"],["youtube.com"],[1],[1],[1],["linkedin.com"],[2],[2],[7]]

Output:
[null,null,null,null,"facebook.com","google.com","facebook.com",null,"linkedin.com","google.com","mig.mk"]

Explanation:
BrowserHistory browserHistory = new BrowserHistory("mig.mk");
browserHistory.visit("google.com");       // You are in "mig.mk". Visit "google.com"
browserHistory.visit("facebook.com");     // You are in "google.com". Visit "facebook.com"
browserHistory.visit("youtube.com");      // You are in "facebook.com". Visit "youtube.com"
browserHistory.back(1);                   // You are in "youtube.com", move back to "facebook.com" return "facebook.com"
browserHistory.back(1);                   // You are in "facebook.com", move back to "google.com" return "google.com"
browserHistory.forward(1);                // You are in "google.com", move forward to "facebook.com" return "facebook.com"
browserHistory.visit("linkedin.com");     // You are in "facebook.com". Visit "linkedin.com"
browserHistory.forward(2);                // You are in "linkedin.com", you cannot move forward any steps.
browserHistory.back(2);                   // You are in "linkedin.com", move back two steps to "facebook.com" then to "google.com". return "google.com"
browserHistory.back(7);                   // You are in "google.com", you can move back only one step to "mig.mk". return "mig.mk"
#+end_example


** Constraints:
- 1 <= homepage.length <= 20
- 1 <= url.length <= 20
- 1 <= steps <= 100
- homepage and url consist of  '.' or lower case English letters.
- At most 5000 calls will be made to visit, back, and forward.

** Analysis
One approach is to use two stacks, one for ~history~, one to save the ~future~ pages.

** Test scenario
#+CAPTION: Test scenario
#+begin_src cpp
#include <string>

using std::string;

int main(){
BrowserHistory history = new BrowserHistory("https://www.google.com");

// User visits a few pages
history.visit("https://www.google.com/search?q=java");
history.visit("https://www.wikipedia.org/");
history.visit("https://www.amazon.com/");

// User clicks back button once
string previousPage = history.back(1);
cout << "User is now on page: " << previousPage;

// User clicks forward button twice
string nextPage = history.forward(2);
cout << "User is now on page: ",  nextPage;
}
#+end_src

** Starter code
#+CAPTION: Starter code
#+begin_src cpp
#include <string>

class BrowserHistory {
public:
    BrowserHistory(string homepage){

    }
    void visit(string url){

    }
    string back(int steps){

    }
    string next(int steps){

    }
}
#+end_src

** Solution
#+CAPTION: Example solution
#+INCLUDE: ./design-browser-history/browser-history-solution.cpp   src cpp :lines "8-47"

* Bipartite Graph
There is an undirected graph with ~n~ nodes, where each node is numbered between ~0~ and ~n-1~. You are given a 2D array graph, where ~graph[u]~ is an array of nodes that node ~u~ is adjacent to. More formally, for each ~v~ in ~graph[u]~, there is an undirected edge between node ~u~ and node ~v~. The graph has the following properties:

- There are no self-edges (~graph[u]~ does not contain ~u~).
- There are no parallel edges (~graph[u]~ does not contain duplicate values).
- If ~v~ is in ~graph[u]~, then ~u~ is in ~graph[v]~ (the graph is undirected).
- The graph may not be connected, meaning there may be two nodes ~u~ and ~v~ such that there is no path between them.

A graph is bipartite if the nodes can be partitioned into two independent sets ~A~ and ~B~ such that every edge in the graph connects a node in set ~A~ and a node in set ~B~.

Return ~true~ if and only if it is bipartite.

** Examples:

*** Example 1:
#+CAPTION: Example graph 1
[[./img/bi2.jpg]]

    #+begin_verbatim
Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
#+end_verbatim

- Explanation :: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.

*** Example 2:
 #+CAPTION: Example graph 2
[[./img/bi1.jpg]]

#+begin_verbatim
Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
#+end_verbatim
*Explanation:* We can partition the nodes into two sets: {0, 2} and {1, 3}.

** Constraints:
- ~graph.length == n~
- ~1 <= n <= 100~
- ~0 <= graph[u].length < n~
- ~0 <= graph[u][i] <= n - 1~
- ~graph[u]~ does not contain ~u~.
- All the values of ~graph[u]~ are unique.
- If ~graph[u]~ contains ~v~, then ~graph[v]~ contains ~u~.


** Analysis
The obvious approach is to use BFS or DFS to traverse the graph.

** Solutions
*** Bipartite Graph solution using BFS
#+INCLUDE: ./bipartite-graph/bfs.cpp src cpp

Similatrly, we can use DFS instead of BFS

*** Bipartite Graph solution using DFS
#+INCLUDE: ./bipartite-graph/dfs.cpp src cpp

But this is a primer on how we can utilize ~Union-Find~.

*** Bipartite Graph solution using Union-Find

#+INCLUDE: ./bipartite-graph/union-find.cpp src cpp

* Reverse Pairs
Given an integer array ~nums~, return the number of /reverse pairs/ in the array.

A /reverse pair/ is a pair ~(i, j)~ where:
- ~0 <= i < j < nums.length~ and
- ~nums[i] > 2 * nums[j]~.

** Examples:
*** Example 1:
#+begin_example
Input: nums = [1,3,2,3,1]
Output: 2
#+end_example
- Explanation :: The reverse pairs are:
  #+begin_example
  (1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
  (3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
  #+end_example

*** Example 2:
#+begin_example
Input: nums = [2,4,3,5,1]
Output: 3
#+end_example
- Explanation :: The reverse pairs are:
  #+begin_example
  (1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
  (2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
  (3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
  #+end_example

** Constraints:
- $1 <= ~nums.length~ <= 5 * 10^4$
- $-2^{31} <= ~nums[i]~ <= 2^{31} - 1$

** Solution
*** Using Divide and Conquer and Merge sort
#+INCLUDE: ./reverse-pairs/binary-search-merge-sort.cpp src cpp

*** Using segment tree
#+INCLUDE: ./reverse-pairs/segment-tree.cpp src cpp
