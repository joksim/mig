* Maximum Subarray
Given an integer array ~nums~, find the  subarray with the largest sum, and return its sum.

** Examples
#+begin_example
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
#+end_example

Explanation: The subarray [4,-1,2,1] has the largest sum 6.

#+begin_example
Input: nums = [1]
Output: 1
#+end_example

Explanation: The subarray [1] has the largest sum 1.

#+begin_example
Input: nums = [5,4,-1,7,8]
Output: 23
#+end_example
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

** Constraints:
- $1 <= nums.length <= 10^5$
- $-10^4 <= nums[i] <= 10^4$

** Solutions
*** Brute force
We can start with brute-force by trying out every possible sub-array in $nums$ and choosing the one with maximum sum.

#+INCLUDE: "./maximum-subarray.cpp" src c++ :lines "25-33"


- Time Complexity :: $O(N^2)$, where $N$ is the number of elements in ~nums~. There are $N*(N+1)/2$ total sub-arrays and trying out each one takes time of $O(N^2)$
- Space Complexity :: $O(1)$

*** Divide & conquer
We can solve this using divide and conquer strategy. This is the follow-up question asked in this question. This involves modelling the problem by observing that the maximum subarray sum is such that it lies somewhere:
- entirely in the left-half of array ~[L, mid-1]~, OR
- entirely in the right-half of array ~[mid+1, R]~, OR
- in array consisting of mid element along with some part of left-half and some part of right-half such that these form contiguous subarray - ~[L', R'] = [L', mid-1] + [mid] + [mid+1,R']~, where ~L' >= L~ and ~R' <= R~.

With the above observation, we can recursively divide the array into sub-problems on the left and right halves and then combine these results on the way back up to find the maximum subarray sum.


#+INCLUDE: "./maximum-subarray.cpp" src c++ :lines "37-55"

- Time Complexity :: $O(NlogN)$, the recurrence relation can be written as $T(N) = 2T(N/2) + O(N)$ since we are recurring for left and right half $(2T(N/2))$ and also calculating maximal subarray including mid element which takes $O(N)$ to calculate. Solving this recurrence using master theorem, we can get the time complexity as $O(NlogN)$
- Space Complexity :: $O(logN)$, required by recursive stack

We can further optimize the previous solution. The $O(N)$ term in the recurrence relation of previous solution was due to computation of max sum subarray involving $nums[mid]$ in each recursion.

But we can reduce that term to $O(1)$ if we precompute it. This can be done by precomputing two arrays $pre$ and $suf$ where pre[i] will denote maximum sum subarray ending at $i$ and $suf[i]$ denotes the maximum subarray starting at $i$.

#+INCLUDE: "./maximum-subarray.cpp" src c++ :lines "60-74"

- Time Complexity :: $O(N)$, the recurrence relation can be written as $T(N) = 2T(N/2) + O(1)$ since we are recurring for left and right half $(2T(N/2))$ and calculating maximal subarray including mid element in $O(1)$. Solving this recurrence using master theorem, we can get the time complexity as $O(N)$
- Space Complexity :: $O(N)$, required by ~suf~ and ~pre~.

*** Dynamic Programming - Top-down (Memoization)
We can observe a lot of repeated calculations if we draw out the recursive tree for above solution.
#+begin_example
                                   f(0, False)                       ðŸ”½ => repeated calculations
                                 /             \
                       f(1, False)              f(1, True)
                      /          \       ðŸ”½          \      ðŸ”½
             f(2, False)      f(2, True)           f(2, True)
          /            \  ðŸ”½       \   ðŸ”½           \  ðŸ”½
   f(3, False)   f(3,True)     f(3, True)           f(3, True)
   /        \            \           \                  \
 ...        ...          ...         ...                ...
#+end_example
These redundant calculations can be eliminated if we store the results for a given state and reuse them later whenever required rather than recalculating them over and over again.

Thus, we can use /memoization/ technique here to make our solution more efficient. Here, we use a ~dp~ array where ~dp[mustPick][i]~ denotes the maximum sum subarray starting from ~i~ and ~mustPick~ denotes whether the current element must be picked compulsorily or not.

#+INCLUDE: "./maximum-subarray.cpp" src cpp :lines

** Dynamic Programming approaches
