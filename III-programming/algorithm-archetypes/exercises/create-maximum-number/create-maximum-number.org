* Create Maximum Number
You are given two integer arrays ~nums1~ and ~nums2~ of lengths ~m~ and ~n~ respectively. ~nums1~ and ~nums2~ represent the digits of two numbers. You are also given an integer ~k~.

Create the maximum number of length ~k <= m + n~ from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the ~k~ digits representing the answer.

** Examples

#+CAPTION: Example 1
#+begin_example
Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]
#+end_example

#+CAPTION: Example 2:
#+begin_example
Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]
#+end_example

#+CAPTION: Example 3:
#+begin_example
Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]
#+end_example


** Constraints:
- $m == nums1.length$
- $n == nums2.length$
- $1 \le m, n \le 500$
- $0 \le nums1[i], nums2[i] \le 9$
- $1 \le k \le m + n$


** Solution
*** Greedy approach
To create max number of length ~k~ from two arrays, you need to create max number of length ~i~ from array one and max number of length ~k-i~ from array two, then combine them together. After trying all possible ~i~, you will get the max number created from two arrays.

Optimization steps:
1. Suppose ~nums1 = [3, 4, 6, 5]~, ~nums2 = [9, 1, 2, 5, 8, 3]~, the maximum number you can create from ~nums1~ is ~[6, 5]~ with length ~2~. For ~nums2~, it's ~[9, 8, 3]~ with length 3. Merging the two sequence, we have ~[9, 8, 6, 5, 3]~, which is the max number we can create from two arrays without length constraint. If the required length $k \le 5$, we can simply trim the result to required length from front. For instance, if $k = 3$, then ~[9, 8, 6]~ is the result.
2. Suppose we need to create max number with ~length 2~ from ~num = [4, 5, 3, 2, 1, 6, 0, 8]~. The simple way is to use a stack, first we push ~4~ and have ~stack [4]~, then comes ~5 > 4~, we pop ~4~ and push ~5~, stack becomes ~[5]~, ~3 < 5~, we push ~3~, stack becomes ~[5, 3]~. Now we have the required length 2, but we need to keep going through the array in case a larger number comes, $2 < 3$, we discard it instead of pushing it because the stack already grows to required size ~2~. ~1 < 3~, we discard it. ~6 > 3~, we pop ~3~, since ~6 > 5~ and there are still elements left, we can continue to pop ~5~ and push ~6~, the stack becomes ~[6]~, since ~0 < 6~, we push ~0~, the stack becomes ~[6, 0]~, the stack grows to required length again. Since ~8 > 0~, we pop ~0~, although $8 > 6$, we can't continue to pop 6 since there is only one number, which is ~8~, left, if we pop ~6~ and push ~8~, we can't get to length 2, so we push ~8~ directly, the stack becomes ~[6, 8]~.
3. In the basic idea, we mentioned trying all possible lengths ~i~. If we create max number for different ~i~ from scratch each time, that would be a waste of time. Suppose ~num = [4, 9, 3, 2, 1, 8, 7, 6]~, we need to create max number with length from ~1~ to ~8~. For ~i==8~, result is the original array. For ~i==7~, we need to drop 1 number from array, since ~9 > 4~, we drop ~4~, the result is ~[9, 3, 2, 1, 8, 7, 6]~. For ~i==6~, we need to drop ~1~ more number, ~3 < 9~, skip, ~2 < 3~, skip, ~1 < 2~, skip, ~8 > 1~, we drop ~1~, the result is ~[9, 3, 2, 8, 7, 6]~. For ~i==5~, we need to drop ~1~ more, but this time, we needn't check from beginning, during last scan, we already know ~[9, 3, 2]~ is monotonically non-increasing, so we check ~8~ directly, since ~8 > 2~, we drop ~2~, the result is ~[9, 3, 8, 7, 6]~. For ~i==4~, we start with ~8~, ~8 > 3~, we drop ~3~, the result is ~[9, 8, 7, 6]~. For ~i==3~, we start with ~8~, ~8 < 9~, skip, ~7 < 8~, skip, ~6 < 7~, skip, by now, we've got maximum number we can create from ~num~ without length constraint. So from now on, we can drop a number from the end each time. The result is ~[9, 8, 7]~, For ~i==2~, we drop last number ~7~ and have ~[9, 8]~. For ~i==1~, we drop last number ~8~ and have ~[9]~.

   #+INCLUDE: "./create-maximum-number.cpp" src c++ :lines "19-51"
